Basic Introduction of JAVA:
*JAVA is a platform independent by converting the high level codes into byte code by complilation or interpretation and
that byte code is processed by the JVM( this is platform dependent).
*Everything thing in java works based on Class and Objects.
ex: Java Hello World Program

        public class Main{
            public static void main(String []args){
                System.out.println("Hello World");
            }
        }

*In the above example the public a access modifier which allows us to access the class or methods or variable.
*class- class Keyword.
*Main-Name of the class.
*static-this also a access modifier which denotes the method which can access without creating the objects.
*(String []args)-it denotes the arguments which is passed to the main method.
*System.out.println("Hello World");-System is a class name, out-object, println-method,this all accessed by placing the
 pointer(.),"Hello World"-String data type,(;)-semicolon need to be present at the end of the every declaration.

 Running the Code:
    *To run the code first we need to compile the code which is done by the javac(java compiler) which is in the part of
     the jdk and the code Main.java is compiled then produce the byte code.
    *To run the code by using Java command and the code is run by JVM.
    *Then the file name and the java Main class name must be same.

Why We Need Programming Languages:
    *Basically the CPU(Central Processing Unit) Understand only the machine level language(Binary sequence 0's and 1's)
    humans are not able to understand it or program it due to that the high level languages are developed(C,C++,Java..).
    *That languages codes are in human readable and understandable form then that codes are converted into the low level
    language by compiler and interpreter which converts the high level into low level (binary code) that code can be und
    -erstand by the CPU based on the instruction written in the code the CPU perform the task like control the cache ,
    Main and Storage memory.
    *The Fetching and Retriving the data is done by the OS(operating System) which is act as a mediator between the User
    ,CPU,etc... it also a Software which is execute during the booting of computer.

    COMPILER(Just In Time Compilation(JIT)):                    INTERPRETER:
    *Which convert the source code into the byte code           *it convert the code line by line.
    directly.
    *Fast campared to the interpreter.                          *Slow due to the line by line complilation.
    *All errors are show at once.                               *Line by line errors are showen during the execution.
    *ex:C,C++,JAVA..etc.                                        *ex:Python,JAVA,Ruby..etc.

What is JRE(JAVA Runtime Environment):
    *Which is used to run the code by providing the JVM,Java packages and other component for the execution of code.The
    JRE is under the JDK(JAVA Development Kit).

Static Type Languages:                	                            Dynamic Type Language:
*We need mention what data type we are going to use(JAVA,C,C++).	*Not need to mention the data type the compiler will
                                                                    allocate the memory to the data types(Python..etc).

Variable Naming:
	*The name should be starts with alphabets or underscore.(aaa,Aq,_ww).
	*The name should not be keywords and not contain the special letters.
	*For constant values need to use the full capital letters and with underscore.(MAX_VALUE=10).
    *If a Variable contains more word means the words Starting should be in capital.(NameOfPerson).

Data Types:
Primitive Data Types:
	*This is Nonreference variable. These only copy the value not the referance.ex: x=10 then y=x then x=5 the o/p x=5,
	y=10.
	*Values are stored in Stack memory,
	*There is no any default value is created for primitive variable we need to assign some value otherwise it will show
	 compiler Error.
	        ex:DataType	 Size (in bits)	    Default Value	                Range
               byte	        8	            0	                         -128 to 127
               short	    16	            0	                         -32,768 to 32,767
               int	        32	            0	                         -2,147,483,648 to 2,147,483,647
               long	        64	            0L	                         + or -9,223,372,036,854,775,808
               float	    32	            0.0f	                    ≈ ±3.40282347×10³⁸ (7 decimal digits)
               double	    64	            0.0d	                    ≈ ±1.7976931348623157×10³⁰⁸ (15 decimal digits)
               char	        16	            '\u0000'	                0 to 65,535 (represents Unicode characters)
               boolean	    1               (not precisely defined)	    false	true or false

Non-Primitive Data Type:
	*Any data types which is created by the classes is known as Non-primitive data type, which is need to create object
	to access the  data types of the classes by using (.) bot operator to access.
	*These one is reference variable.
	*It's store in Heap Memory. Can be access by only the reference.
		Ex:     class Point {
                    int x;
                    int y;
                }

                class Test {
                    public static void main(String[] args) {
                        Point p1 = new Point();
                        p1.x = 10;
                        p1.y = 20;

                        Point p2 = p1;
                        p2.x = 30;

                        System.out.println(p1.x); // Output: 30
                        System.out.println(p2.x); // Output: 30
                    }
                }

		*In the above example the p1 and p2 refer the same variable if any change happen in the p1 or p2 it will reflect
         on the both p1 and p2.
		*This can be solved by creating the different object for both p1 and p2.
		*The Heap memory is created when the object of the class is created.
		*While creating the Non-Primitive variable the default value is assigned to the variable ex: int x;
		 ,When calling the x it will return the 0 as default value even not assigning to any values into it.
		*If initialize other than then the primitive type it will assign as null. ex: String, Array, etc…

Wrapper Class in Java:
	*In java allow us to create a Non-primitive type of the primitive type using the Wrapper class. Ex: create Integer for int .
	*This can very useful when we deal with object and mostly in generic. ex: Array[Integer].This will useful when we using the references.
	*This allows us as to create basic data types as reference or class objects.
	Autoboxing : converting the primitive to non-primitive using wrapper class.(int x=10 then Integer x2=x).
	Auto Unboxing :converting the non-primitive to the primitive .(Integer x=18 then int x2=x).
	*Suppose we creating the Integer wrapper class for two variable with same value. In which that two variables are not equal.
	*The classes in java.util package handles only objects and hence wrapper classes help in this case also.
		Ex:
			Integer x1=100,x2=100;
			x1 and x2 are not same.
	*Suppose we creating the smaller same values for  two diff variable it will shows they are equal because the cache memory refers the same object for small values.

Type Conversion in Java:
	*The widening conversion only done by this following orders.
	            byte → short → int → long → float → double
                              ↑
                            char
             Ex: public class TypeConversionExample {
                     public static void main(String[] args) {
                         double d = 65.4;
                         int i = (int) d;      // Narrowing conversion from double to int
                         char c = (char) i;    // Narrowing conversion from int to char

                         System.out.println(i);  // Output: 65
                         System.out.println(c);  // Output: A
                     }
                 }
	*You may have high chances to loss of data.
	*This is not following the widening order changes due to this the above point are happening.
*In Java, Integer.parseInt() is a static method of the Integer wrapper class, used to convert a String representation of
 a number into its primitive int equivalent.

JAVA INPUTS:
	Which is two types :1.Bufferred Reader
				        2.Scanner
	1.Bufferred Reader: It's a simple class which used to read a character or a sequence of characters or read line
	function is used to read the line.
	*it's more faster than the Scanner, we can specifies the size range of the data.
	*In java the packages are stored in the directories or in the folder ways java inside it contains the io etc.
	*In the below example the "System.in" is an input stream of Byte stream then it converted into a character 
    stream and then it get readed by the buffer reader.
    *And it throws the exceptions(IO).
    *In general the buffer is used to read the large input because it allacate the large buffer.it mare synchronised 
    when using multiple threads BufferedReader can be used.
    Ex:
        import java.io.*;

        class Test {
            public static void main(String[] args) throws IOException {
                BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

                System.out.println("Enter an Integer:");
                int x = Integer.parseInt(br.readLine());

                System.out.println("You entered " + x);
            }
        }
    2.Scanner: It's is an advanced version of reading the data,it is basically used to read the formatted input. 
    *It is much easier when compared to the String BufferedReader but it is slower then BufferedReader because it doing
    some post processing in the code.
                ex: import java.util.Scanner;
                    class Test {
                        public static void main(String[] args) {
                            Scanner sc = new Scanner(System.in);

                            String s = sc.nextLine();
                            System.out.println("You Entered String: " + s);

                            int x = sc.nextInt();
                            System.out.println("You Entered Integer: " + x);

                            float f = sc.nextFloat();
                            System.out.println("You Entered Float: " + f);
                        }
                    }

JAVA Output:
        1.System.out.print()
        2.System.out.println()
        3.System.out.printf() or System.out.format()
    1.System.out.print():                               2.System.out.println()
        *It does't print a new line after printing.             *It print a new line after printing.
    *The both print and println if it takes the non-primitive as an input means it will convert it into a string and then print.
    And this explicitly written to handle the primitives also there some multiple versions which some handles the primitive types
    and some can handle the primitive types.
            ex:     class Test {
                    public static void main(String[] args) {
                        int x = 10, y = 20;
                        char z = 'A';
                        String str = "GFG";

                        System.out.println(x);
                        System.out.println(x + y);
                        System.out.println(x + " " + y);
                        System.out.print(str + " ");
                        System.out.print("Course\n");
                    }
                }
    3.System.out.printf() or System.out.format():
    *It's mainly used to handle the formatting output like floating point numbers,dates,time.
    *This contains the place holders in the output which is used to hold the place for the mentioned variable in the output function.
            ex:     class Test {
                    public static void main(String[] args) {
                        int x = 100, y = 200;
                        System.out.format("Value of x is : %d\n", x);

                        float y1 = (float)Math.PI;
                        System.out.println(y1);

                        System.out.format("Value of PI = %.2f\n", y1);
                        System.out.format("Value of PI = %5.2f\n", y1);
                        System.out.format("Value of PI = %05.2f\n", y1);
                        System.out.printf("x = %d, y = %d\n", x, y);
                    }
                }
                *The place holder is used to reserve the place for the variable in the output statement like %d-for integer, 
                %c-for character,%s-for string.
                *As mentioned in the example the %2 is used to print the 2 number after the point,the %5.2 must contains the 5 char 
                before the point if it not contains the 5 char means it will automatically filled it with the blank space for the required 
                places to make it as 5 size like _3.14 it contains 5 places and the 2 number after the point.
                *If we using like this %05.2f means it automatically fill the extra space with the 0 like 03.14.
STRING:
    *String is Immutable. So we can't able to change the String value.If suppose it happens means using the String Build-in function,if will 
    create the new object for the new string value and store in it and delete the old object it will costly.
    String Methods:
                *length()-return length of the string.
                *charAt(index)-return char at the mentioned index.
                *indexOf(str)-return the index of the String.
                *indexOf(str,fromIndex)-return index of the string and mention the starting index.
                *lastIndexOf(str)-return the last index of the string.
                *lastIndexOf(str,from Index)-return last index form the mentioned index.
                *compareTo(str)-compare the two strings and return true or flase.
                *substring(start index)-return the sub string from mentioned index.
                *substring(start index,end index)-return the substring between the start and ending index.
                *chars()-this will allows us to create the Stream of string this will helpfull while impleamenting the heap and for other class.
                The above methods are the common methods which is present in both String, String buffer and builder.this are some example Methods
                there are many methods present. 
            #In String Methods it can allows char as an arguments, but in String buffer or Builder only allows the String as an arguments.
    *For changing the String in to the mutable we are using the String Builder and String Buffer.
    Basic example:
        *String Builder:
            *it will allow us to change the original object for that string. Not creating the new object.it does not contains thread safty.
            for single threaded environment.
            
        *String Buffer:
            *it is same as the String Builder but it contains is thread safty. For multi Thread environment.
        String example:
                    boolean isPangram(String s) {
                        int n = s.length();
                        if (n < 26)
                            return false;

                        boolean visited[] = new boolean[26];

                        for (int i = 0; i < n; i++) {
                            char x = s.charAt(i);
                            if (x >= 'a' && x <= 'z')
                                visited[x - 'a'] = true;
                            if (x >= 'A' && x <= 'Z')
                                visited[x - 'A'] = true;
                        }

                        for (int i = 0; i < 26; i++) {
                            if (visited[i] == false)
                                return false;
                        }

                        return true;
                    }

                *The above program will check wether the given string is pangram(it means all alphabets are present in a string or not without the
                case sensitive) or not 

